package com.courier.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	@Autowired
	private UserDetailsService userDetailsService;
	@Autowired
	private JwtFilter jwtFilter;
//	@Bean
//	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
//		return http.csrf(customizer -> customizer.disable())
//				//.cors(Customizer.withDefaults())
//				//.formLogin(Customizer.withDefaults())
//				//.httpBasic(Customizer.withDefaults())
//				.authorizeHttpRequests(request -> request.requestMatchers("/login", "/register").permitAll()
//				        .requestMatchers(HttpMethod.OPTIONS).permitAll()
//
//						.requestMatchers("/admin/**").hasRole("ADMIN")
//						.requestMatchers("/warehouse/**").hasRole("WAREHOUSE_MANAGER")
//						.requestMatchers("/delivery/**").hasRole("DELIVERY_AGENT")
//						.requestMatchers("/customer/**").hasRole("CUSTOMER")
//						.anyRequest().authenticated())
//				.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
//				.addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class)
//				.build();
//
//	}

	@Bean
	public SecurityFilterChain authorizeRequests(HttpSecurity http) throws Exception
	{
		//1. Disable CSRF filter
		http.csrf(customizer -> customizer.disable())
		//2. configure URL based access
        .authorizeHttpRequests
        (request -> 
        request.requestMatchers("/products/view",
        		"/users/signup","/users/signin",
				"/v*/api-doc*/**","/swagger-ui/**").permitAll() 
        //required explicitly for JS clients (eg React app - to permit pre flight requests)
        //.requestMatchers(HttpMethod.OPTIONS).permitAll()
        	
       .requestMatchers("/customer/**")
       .hasRole("CUSTOMER")
       .requestMatchers("/admin/**")
       .hasRole("ADMIN")        		
        .anyRequest().authenticated())  
  //      .httpBasic(Customizer.withDefaults()) - replacing it by custom JWT filter
        .sessionManagement(session 
        		-> session.sessionCreationPolicy(
        				SessionCreationPolicy.STATELESS));
		//adding custom JWT fi;lter before any auth filter
		http.addFilterBefore(jwtFilter, 
				UsernamePasswordAuthenticationFilter.class);
        return http.build();
	}

//	@Bean
//	public AuthenticationProvider authenticationProvider() {
//		DaoAuthenticationProvider dao = new DaoAuthenticationProvider();
//		dao.setPasswordEncoder(NoOpPasswordEncoder.getInstance());
//		dao.setUserDetailsService(userDetailsService);
//		return dao;
//	}

	@Bean
	public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
		return config.getAuthenticationManager();
	}

}
