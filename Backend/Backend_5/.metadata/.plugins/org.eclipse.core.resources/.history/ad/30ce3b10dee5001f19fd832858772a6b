package com.courier.security;


import java.security.NoSuchAlgorithmException;
import java.util.Date;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;

@Service
public class JWTService {


    private SecretKey secretkey;

    public JWTService() {

        try {
            KeyGenerator keyGen = KeyGenerator.getInstance("HmacSHA256");
            secretkey = keyGen.generateKey();
            
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

//    public String generateToken(String username) {
//        Map<String, Object> claims = new HashMap<>();
//        claims.put("id",new Users());
//        
//        return Jwts.builder()
//                .claims()
//                .add(claims)
//                .subject(username)
//                .issuedAt(new Date(System.currentTimeMillis()))
//                .expiration(new Date(System.currentTimeMillis() + 60 * 60 * 30))
//                .and()
//                .signWith(secretkey)
//                .compact();
//
//    }
    public String generateJwtToken(Authentication authentication) {
		//log.info("generate jwt token " + authentication);//contains verified user details
		UserPrinciple userPrincipal = (UserPrinciple) authentication.getPrincipal();
//JWT : userName,issued at ,exp date,digital signature(does not typically contain password , can contain authorities
		return Jwts.builder() // JWTs : a Factory class , used to create JWT tokens
				.setSubject((userPrincipal.getUsername())) // setting subject part of the token(typically user
															// name/email)
				.setIssuedAt(new Date())// Sets the JWT Claims iat (issued at) value of current date
				.setExpiration(new Date((new Date()).getTime() + 60*60*60*30))// Sets the JWT Claims exp
																					// (expiration) value.
				.claim("role", userPrincipal.getUser().getRole().name())
				.claim("user_id",userPrincipal.getUser().getId())
		
				.signWith(secretkey) // Signs the constructed JWT using the specified
															// algorithm with the specified key, producing a
															// JWS(Json web signature=signed JWT)

				// Using token signing algo : HMAC using SHA-512
				.compact();// Actually builds the JWT and serializes it to a compact, URL-safe string
	}
//    public Claims validateJwtToken(String jwtToken) {
//		// try {
//		Claims claims = Jwts.parserBuilder() //create JWT parser
//				.setSigningKey(secretkey) //sets the SAME secret key for JWT signature verification
//				.build()//rets the JWT parser set with the Key
//				.parseClaimsJws(jwtToken) //rets JWT with Claims added in the body
//				.getBody();//=> JWT valid ,  rets the Claims(payload)
//		
//		return claims;		
//	}
	public Claims validateJwtToken(String jwtToken) {
		// try {
		Claims claims = Jwts.parserBuilder() //create JWT parser
				.setSigningKey(secretkey) //sets the SAME secret key for JWT signature verification
				.build()//rets the JWT parser set with the Key
				.parseClaimsJws(jwtToken) //rets JWT with Claims added in the body
				.getBody();//=> JWT valid ,  rets the Claims(payload)
		/*
		 * parseClaimsJws - 
		 * throws:UnsupportedJwtException -if the JWT body | payload does not represent any Claims 
		 * JWSMalformedJwtException - if the JWT body | payload is not a valid 
		 * JWSSignatureException - if the JWT signature validation fails
		 * ExpiredJwtException - if the specified JWT is expired 
		 * IllegalArgumentException - if the JWT claims body | payload is null or empty or only whitespace
		 */
		return claims;		
	}

}